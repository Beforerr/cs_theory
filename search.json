[
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Multifluid model of a one-dimensional steady state force-free current sheet",
    "section": "Introduction",
    "text": "Introduction\n\nMotivation\nIn MHD theory, for rotational rotational discontinuity, we have this following relationship\n\\[\n[[\\vec{U}]]=\\left(\\frac{\\xi \\rho}{\\mu_0}\\right)^{1 / 2}\\left[\\left[\\frac{\\vec{B}}{\\rho}\\right]\\right]\n\\]\nwhere \\(\\xi \\equiv 1-\\frac{p_{\\parallel}-p_{\\perp}}{B^2 / \\mu_0}\\).\n\nHowever, observations of solar wind discontinuities reveals discrepancies between\n\nAlfven velocity and plasma velocity change across discontinuities\nAnisotropic MHD theory-predicted and directly measured ion anisotropies\n\nMultifluid theory is proposed to address these discrepancies. The basic idea is that we could have zero bulk velocity with non zero pressure.\n\nMHD in a nutshell\n\\[\n\\begin{aligned}\n& \\frac{\\partial \\rho}{\\partial t}+(\\vec{V} \\cdot \\nabla) \\rho+\\rho \\nabla \\cdot \\vec{V}=0 \\\\\n& \\rho\\left[\\frac{\\partial \\vec{V}}{\\partial t}+(\\vec{V} \\cdot \\nabla) \\vec{V}\\right]+\\nabla p=\\vec{J} \\times \\vec{B} \\\\\n& p=\\alpha \\rho^\\gamma \\\\\n& \\nabla \\times \\vec{B}=\\mu_0 \\vec{J} \\\\\n& \\frac{\\partial \\vec{B}}{\\partial t}=\\nabla \\times(\\vec{V} \\times \\vec{B})\n\\end{aligned}\n\\]\n\n\n\nPrevious Work\nOn the extreme of multiple fluid theory, we have the kinetic Harris model for the current sheet.\n\nno normal field, \\(B_z = 0\\)\nuniform cross-tail drift velocity, \\(u_y\\)\nvanishing particle density far from the sheet\n\n\nSteinhauer, McCarthy, and Whipple (2008) built a multifluid model to study the steady state magnetotail current sheet.\n\n\n\nIon trajectories in model magnetic field.\n\n\n\nFor the symmetric three-fluid system with \\(B_y=0\\),\n\n\n\nMagnetic field, current density, ion density and out-of-plane flow for Bz = 0.1, βe = 0.5, βi = 1. Solid lines are fluid model results and dot symbols are from the Harris sheet solution.\n\n\nHere, we are interested in the case of a force-free current sheet and start from the simplest case of two ion species."
  },
  {
    "objectID": "index.html#plasma-field-equations-for-a-one-dimensional-multifluid",
    "href": "index.html#plasma-field-equations-for-a-one-dimensional-multifluid",
    "title": "Multifluid model of a one-dimensional steady state force-free current sheet",
    "section": "Plasma-Field Equations for a One-Dimensional Multifluid",
    "text": "Plasma-Field Equations for a One-Dimensional Multifluid\nConsider a collisionless, steady state plasma composed of multiple fluid groups, and follow the notation in Steinhauer, McCarthy, and Whipple (2008), we have \\(3N\\) equations for \\(N\\) ion species:\n\\[\n\\begin{aligned}\nΓ_α \\frac{d u_{α x}}{d z} &= n_α u_{α y} B_z - Γ_α B_y\n\\\\\nΓ_α \\frac{d u_{α y}}{d z} &= Γ_α B_x-n_α u_{α x} B_z\n\\\\\nΓ_α \\frac{d u_{α z}}{d z} &= -\\frac{1}{2} \\frac{d p_α}{d z}-n_α \\frac{d \\phi}{d z}+n_α u_{α x} B_y-n_α u_{α y} B_x\n\\end{aligned}\n\\tag{1}\\]\nAmpere’s law connects the fields and the flow components and note that electron motion is along the field lines \\(\\mathbf{u_e} = Γ_e \\mathbf{B} / (n_e B_z)\\) :\n\\[\nd B_y / d z = - J_x = - \\sum_α n_α u_{α x} + n_e u_{e x} = -n u_x+\\Gamma_e B_x / B_z\n\\tag{2}\\]\n\\[\nd B_x / d z = J_y = \\sum_α n_α u_{α y} - n_e u_{e y} = n u_y-\\Gamma_e B_y / B_z\n\\tag{3}\\]\n\nThis is a system of \\(3N+2\\) equations for \\(4N+2\\) unknown dependent variables: \\(B_x\\), \\(B_y\\), and \\(N\\) each of \\(n\\), \\(p\\) \\(u_x\\), and \\(u_y\\).\n\n\\(B_z, Γ_α\\) are constant.\nCombine momentum equation (x) (Equation 1) and Ampere’s law (y) (Equation 3) with condition that the constant of integration vanishes at the current sheet center yield\n\\[\nB_x B_z = \\sum n_α u_{α,x} u_{α,z} = \\sum Γ_α u_{α,x}\n\\]\n\nWith asymptotic condition that the derivative goes zero, from momentum equation we have\n\\[\n{B_z}^2 = \\sum \\Gamma_{\\alpha}^2/n_{\\alpha}(\\infty)\n\\tag{4}\\]\n\n\nIn the following, we will consider a system with two ion species."
  },
  {
    "objectID": "index.html#force-free-current-sheet",
    "href": "index.html#force-free-current-sheet",
    "title": "Multifluid model of a one-dimensional steady state force-free current sheet",
    "section": "Force-free current sheet",
    "text": "Force-free current sheet\nWe are interested in solutions with \\(B_x^2 + B_y^2 = B_0^2 = const\\) (force-free current sheet). This provides another equation for the system, now we have 3*2+2+1=9 equations for 10 unknowns (the system is close to be fully determined). From Ampere’s law (Equation 2) and (Equation 3), we have:\n\\[\nn (u_x B_y  - u_y B_x) = 0\n\\]\nAnd \\(n_1 u_{1x} B_y = n_1 u_{1y} B_x + C_1\\) and \\(n_2 u_{2x} B_y = n_2 u_{2y} B_x  - C_1\\). Assuming \\(C_1 = 0\\), from first two equations in (Equation 1), we have:\n\\[\nu_{αx}^2 + u_{αy}^2 = const\n\\]\n\n\nDefinition 1 Express the quantities of the second ion species relative to the first species\n\\[\nu_{αx} := λ_{αx} u_{1x}, \\quad u_{αy} := λ_{αy} u_{1y}, \\quad u_{αz} := λ_{αz} u_{1z}, \\quad n_α := λ_{αn} n_1\n\\]\n\\[\nΛ_x := 1 + \\sum λ_{αx} λ_{αn}, \\quad Λ_y := 1 + \\sum λ_{αy} λ_{αn}, \\quad Λ_z := \\sum 1 + λ_{αz} λ_{αn}\n\\]\nNotes\n\n\\(Γ_e = (1 + λ_z λ_n) Λ_1 =  Λ_z  Γ_1\\).\n\\(Λ_z\\) is constant while \\(Λ_x, Λ_y\\) are not.\n\n\n\nDefinition 2 Force-free condition let us express the magnetic field and velocity in terms of the angle \\(θ\\):\n\\[\nB_x = B_0 \\cos θ, \\quad B_y = B_0 \\sin θ\n\\]\n\\[\nu_{1x} = u_{1} \\cos θ_1, \\quad u_{1y} = u_{1} \\sin θ_1\n\\]\n\n\n\\(C_1=0\\) immediately implies \\(θ = θ_1 + k \\pi\\) and \\(Λ_x=Λ_y\\). #TODO: Prove \\(C_1=0\\) is like a boundary condition not a equation.\nThe first momentum equation (Equation 1) after substituting the above expression becomes:\n\\[\n- u_α \\sin θ_α θ_α' = n_α u_α \\sin θ_α B_z / Γ_α - B_0 \\sin θ\n\\]\n\\[\n\\Rightarrow\nθ_α' = - \\frac{n_α B_z}{Γ_α} \\pm \\frac{B_0}{u_α}\n\\tag{5}\\]\n\nNote that \\(θ_α, n_α\\) are dependent variables, and \\(u_α, B_0, B_z, Γ_α\\) are constants determined by the system.\nSo given the profile of \\(n_α\\), we could solve the above equation to get the profile of \\(θ_α\\), thus the profile of \\(u_α\\).\nThe derivative of \\(θ\\) goes to zero at infinity, gives us a relation between \\(u_1\\) and \\(B_0\\):\n\\[\nu_1 = \\pm \\frac{B_0 Γ_1}{B_z n_1(\\infty)}\n\\tag{6}\\]\n\nThe Ampere’s law (Equation 3) become:\n\\[\n- B_0 \\sin θ θ' = Λ_y n_1 u_1 \\sin θ_1 - Λ_z Γ_1 B_0 \\sin θ / B_z\n\\]\n\\[\n\\Rightarrow\nθ' = \\mp \\frac{Λ_y n_1 u_1 }{B_0} + \\frac{Λ_z Γ_1}{B_z}\n\\tag{7}\\]\nBy equating the above two equations, we could get a relation between \\(n_1\\) and \\(Λ_y\\):\n\\[\nΛ_y = Λ_y(n_1) = -\\frac{B_0 \\left(-n_1 u_1 B_z^2+B_0 \\Gamma _1 B_z-\\Gamma _1^2 u_1 \\Lambda _z\\right)}{\\Gamma _1 n_1 u_1^2 B_z}\n\\]\n\nSolutions\nNormalize the density by \\(n_1(z=\\infty) = 1\\) and the magnetic field by \\(B_z = 1\\).\nThe system \\(S\\) could be fully determined by \\(λ_n, λ_z, B_0\\) parameters, provided \\(n(z)\\) profiles.\n\\[\nS=S(z; n(z); λ_n, λ_z, B_0)\n\\]\nAssuming density profile \\(n_1(z) \\to \\frac{c}{\\left(\\frac{z}{\\delta }\\right)^2+1}+1\\)\nWe have\n\\[\n\\begin{aligned}\n\\varphi (z) &\\to \\frac{\\pi  \\Gamma _1-2 c \\delta  \\tan ^{-1}\\left(\\frac{z}{\\delta }\\right)}{2 \\Gamma _1}\n\\\\\nB_x &\\to B_0 \\cos \\left(\\frac{\\pi  \\Gamma _1-2 c \\delta  \\tan ^{-1}\\left(\\frac{z}{\\delta }\\right)}{2 \\Gamma _1}\\right)\n\\end{aligned}\n\\]\nFor the simplest case \\(λ_n = 1, λ_z = - 1\\), from Equation 4, we have \\(Γ_1 = - B_z / \\sqrt{2}\\).\nWe could also normalize the system length by \\(\\delta = 1\\). So now the system could be fully determined by \\(c, B_0\\).\nGiven \\(c = 1/\\sqrt{2}\\), we have \\(B_y \\to 0\\) as \\(z \\to \\infty\\). Profiles are plotted below for \\(B_0 = 2\\).\n\n\nThe multi-fluid effect is clearly demonstrated by \\(Λ_y - 1\\).\nManipulate[\n Block[{B0 = B0i, c = ci},\n  p1 = Plot[\n    Evaluate[{n[z], Bx[z], By[z], u1x[z], u1y[z]} /. sols //. rulesn],\n    {z, -zmax, zmax},\n    PlotLegends -&gt; {n, Subscript[B, x], Subscript[B, y], Subscript[u, x], Subscript[u, y]}\n  ];\n  Export[\"figures/profiles.jpg\", p1];\n  p1\n  ],\n \n {{ci, 1/Sqrt[2]}, 0, 2},\n {{B0i, 2}, 0.5, 2},\n {{zmax, 10}, 5, 30}\n ]\n\nManipulate[\n Block[{B0 = B0i, c = ci, Λz = Λz0},\n  p = Plot[\n    Evaluate[{Λy - 1, Jxi, Jx, Jyi, Jy} /. sols //. \n      rulesn],\n    {z, -zmax, zmax},\n    PlotLegends -&gt; {Subscript[Λ, y] - 1, Subscript[J, \n      x, i], Subscript[J, x], Subscript[J, y, i], Subscript[J, y]}, \n    PlotRange -&gt; All];\n  Export[\"figures/J_profiles.jpg\", p];\n  p\n  ],\n\n {{ci, 1/Sqrt[2]}, 0, 2},\n {{B0i, 2}, 0.5, 2},\n {Λz0, 0, 1},\n {{zmax, 10}, 5, 30}\n]\nFor the same asymptotic magnetic field, it is interesting to see how the plasma profiles change with different system parameters.\n\\[\n\\text{cond}(n(z), λ_{n,∞}, λ_{z,∞}) = 0\n\\]\nHere we set \\(B_y(z=\\infty) = 1/2 B_y(z=0)\\) and \\(B_0 = 2 B_z\\), and fix \\(λ_{z,∞} = -1\\). By varying \\(λ_{n,∞}\\), we find that the magnetic field profiles are exactly the same, while plasma velocity profiles vary. We normalize the plasma velocity by asympotic Alfvén velocity \\(v_{A,∞} = B_0 / \\sqrt{n}\\), and the profiles are plotted below Figure 1 (b). It could be seen that for \\(λ_{n,∞} = 1\\), we have zero bulk velocity change across the current sheet in the asymptotic limit.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Magnetic field, ion density, and ion bulk velocity for \\(λ_{n,∞}=1\\) and \\(λ_{z,∞}=-1\\).\n\n\n\n\n\n\n\n\n\n\n\n(b) Normalized Plasma Velocity \\(U_x\\) Profiles for Different \\(λ_{n,∞}\\).\n\n\n\n\n\n\n\n\n\n\n\n(c) Normalized Plasma Velocity \\(U_y\\) Profiles for Different \\(λ_{n,∞}\\).\n\n\n\n\n\n\n\nFigure 1"
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Multifluid model of a one-dimensional steady state force-free current sheet",
    "section": "References",
    "text": "References\n\nSteinhauer, McCarthy, and Whipple (2008)\n\nconf = {ratio -&gt; 1/2}\nTextString[conf]\n&lt;!-- Convert a dict-like configuration to a string --&gt;\nsaveName[c_] := StringJoin[ToString /@ c]"
  },
  {
    "objectID": "notes.html",
    "href": "notes.html",
    "title": "Notes",
    "section": "",
    "text": "Ampere’s law\n\\[\n\\begin{equation}\nd B_x / d z\n= \\sum_\\alpha\\left(n_\\alpha u_{\\alpha y}-\\Gamma_\\alpha B_y / B_z\\right) \\\n= n u_y-\\Gamma_e B_y / B_z\n\\end{equation}\n\\]\n\\[\n\\begin{equation}\nd B_y / d z\n= \\sum_\\alpha\\left(-n_\\alpha u_{\\alpha x}+\\Gamma_\\alpha B_x / B_z\\right)\n= -n u_x+\\Gamma_e B_x / B_z\n\\end{equation}\n\\]\nAsymptotic conditions\n\\[\n{B_z}^2 = \\sum \\Gamma_{\\alpha}^2/n_{\\alpha}(\\infty)\n\\]",
    "crumbs": [
      "Home",
      "Notes"
    ]
  },
  {
    "objectID": "notes.html#force-free-current-sheet",
    "href": "notes.html#force-free-current-sheet",
    "title": "Notes",
    "section": "Force-free current sheet",
    "text": "Force-free current sheet\n\nCoding Part\n(*Solve the system numerically*)\n\n\nΓe := Λz Γ1\nΛx := Λy\nJxi := Λx n[z] u1x[z]\nJyi := Λy n[z] u1y[z]\nJxe := -((Γe Bx[z])/Bz)\nJye := -((Γe By[z])/Bz)\nJx := Jxi + Jxe\nJy := Jyi + Jye\n\nManipulate[\n Block[{B0 = B0i, c = ci},\n  p1 = Plot[\n    Evaluate[{n[z], Bx[z], By[z], u1x[z], u1y[z],\n        Bx[z] u1y[z] - By[z] u1x[z]} /. sols //. rulesn], {z, -zmax,\n     zmax},\n    PlotLegends -&gt; {\"n\", \"\\!\\(\\*SubscriptBox[\\(B\\), \\(x\\)]\\)\",\n      \"\\!\\(\\*SubscriptBox[\\(B\\), \\(y\\)]\\)\",\n      \"\\!\\(\\*SubscriptBox[\\(u\\), \\(x\\)]\\)\",\n      \"\\!\\(\\*SubscriptBox[\\(u\\), \\(y\\)]\\)\",\n      \"\\!\\(\\*SubscriptBox[\\(B\\), \\(x\\)]\\)\\!\\(\\*SubscriptBox[\\(u\\), \\\n\\(y\\)]\\)-\\!\\(\\*SubscriptBox[\\(B\\), \\(y\\)]\\)\\!\\(\\*SubscriptBox[\\(u\\), \\\n\\(x\\)]\\)\"}]\n  ],\n {{ci, 0.5}, 0, 2},\n {{B0i, 2}, 0.5, 2},\n {{zmax, 10}, 5, 30}\n ]\n\nManipulate[\n Block[{B0 = B0i, c = ci, Λz = Λz0},\n  p2 = Plot[\n    Evaluate[{Jxi, Jx, Jyi, Jy} /. sols //. rulesn], {z, -zmax, zmax},\n     PlotLegends -&gt; {\"Jxi\", \"Jx\", \"Jyi\", \"Jy\"},\n         PlotRange -&gt; All\n        ]\n  ],\n\n {{ci, 0.5}, 0, 2},\n {{B0i, 2}, 0.5, 2},\n {Λz0, 0, 1},\n {{zmax, 10}, 5, 30}\n ]",
    "crumbs": [
      "Home",
      "Notes"
    ]
  },
  {
    "objectID": "notes.html#gamma_e-neq-0",
    "href": "notes.html#gamma_e-neq-0",
    "title": "Notes",
    "section": "\\(\\Gamma_e \\neq 0\\)",
    "text": "\\(\\Gamma_e \\neq 0\\)\nAssuming \\(n_2 = \\alpha_n n_1\\) and \\(u_2 = - \\alpha_u u_1\\).\nWe have\n\\[\nn_e = n_1 + n_2 = (1 + \\alpha_n) n_1\n\\\\\n\\Gamma_e = \\Gamma_1 + \\Gamma_2 = (1 - \\alpha_n \\alpha_u) \\Gamma_1\n\\]\nDenote \\(\\Alpha = 1 - \\alpha_n \\alpha_u\\).\nThe Ampere’s law becomes\n\\[\n\\begin{equation}\nd_z B_x = n_1 u_{1y} + n_2 u_{2y} - \\Gamma_e B_y / B_z\n    = (1 - \\alpha_n \\alpha_u) n_1 u_{1y} - \\Gamma_e B_y / B_z\n    = \\Alpha n_1 u_{1y} - \\Alpha \\Gamma_1 B_y / B_z\n\\end{equation}\n\\]\n\\[\n\\begin{equation}\nd_z B_y = - n_1 u_{1x} - n_2 u_{2x} + \\Gamma_e B_x / B_z\n    = - (1 - \\alpha_n \\alpha_u) n_1 u_{1x} + \\Gamma_e B_x / B_z\n    = - \\Alpha n_1 u_{1x} + \\Alpha \\Gamma_1 B_x / B_z\n\\end{equation}\n\\]\nThe momentum equation becomes\n\\[\n\\begin{equation}\n\\Gamma_1 \\frac{d u_{1 x}}{d z}=n_1 u_{1 y} B_z-\\Gamma_1 B_y\n\\end{equation}\n\\]\n\\[\n\\begin{equation}\n\\Gamma_1 \\frac{d u_{1 y}}{d z}=\\Gamma_1 B_x-n_1 u_{1 x} B_z\n\\end{equation}\n\\]\n\\[\n\\begin{equation}\n\\frac{d}{d z}\\left(\\frac{\\Gamma_1^2}{n_1}+\\frac{C n_1^\\gamma}{2}\\right) = {n_1}(u_{1x} B_y-u_{1y} B_x - \\frac{T_e}{2n_e} \\frac{d n_e}{dz})\n\\end{equation}\n\\]\nThe asymptotic conditions become\n\\[\n{B_z}^2 = \\Gamma_1^2/n_1(\\infty) + \\Gamma_2^2/n_2(\\infty)\n= (1+\\alpha_n \\alpha_u^2) \\Gamma_1^2/n_1(\\infty)\n\\]\n\nCombing the first and third equations, we have\n\\[\n\\Alpha \\Gamma u_x = B_z B_x + C_1\n\\]\nSimilarly, combining the second and fourth equations, we have\n\\[\n\\Alpha \\Gamma u_y = B_z B_y + C_2\n\\]\nBecause the first constant of integration vanishes at the current sheet center yield \\(C_1 = 0\\)\n\nCoding Part\n(*Solve the system numerically*)\nγ = 5/3;\nzmax = 10;\neps = 0.001;\n\n(*Define the system of equations*)\neq1 := D[Bx[z], z] == n1[z] u1y[z] + n2 u2y - GammaE By[z]/Bz;\neq2 := D[By[z], z] == -n1[z] u1x[z] - n2 u2x + GammaE Bx[z]/Bz;\neq3 := Gamma1 D[u1x[z], z] == n1[z] u1y[z] Bz - Gamma1 By[z];\neq4 := Gamma1 D[u1y[z], z] == Gamma1 Bx[z] - n1[z] u1x[z] Bz;\neq5 := D[(Gamma1^2/n1[z] + C1 n1[z]^γ/2), z] == n1[z] (u1x[z] By[z] - u1y[z] Bx[z] - Te/(2 ne) D[ne, z]);\n\nu2x := -αu u1x[z];\nu2y := -αu u1y[z];\n\n\nbc2 = n1[zmax] == n1Inf + eps;\nbc3 = Bx[zmax] == 1 - eps;\nbc4 = By[zmax] == ByInfinity;\nbc5 = u1x[zmax] == uxInfinity;\nbc6 = u1y[zmax] == uyInfinity;",
    "crumbs": [
      "Home",
      "Notes"
    ]
  },
  {
    "objectID": "notes.html#gamma_e-0",
    "href": "notes.html#gamma_e-0",
    "title": "Notes",
    "section": "\\(\\Gamma_e = 0\\)",
    "text": "\\(\\Gamma_e = 0\\)\n\nCoding Part\nIn summary, we have five equations and five unknown \\(n, B_x, B_y, u_x, u_y\\) which depend on \\(z\\).\n\\[\n\\begin{equation}\n\\begin{aligned}\nd_z B_y  &= - n u_x\n\\\\\nd_z B_x &= n u_y\n\\\\\nd_z u_x &= B_y (n - 1)\n\\\\\nd_z u_y &= B_x (1 - n)\n\\\\\nd_z n &= \\frac{n (u_x B_y - u_y B_x)}{(-B_z^2/n^2 + \\beta_i \\gamma n^{\\gamma-1} + T_e)}\n\\end{aligned}\n\\end{equation}\n\\]\nAnd the boundary conditions:\n\nwhen \\(z=0\\) : \\(B_x =0\\)\nwhen \\(z \\to \\infty\\) : \\(B_x \\to 1, B_y \\to a\\), \\(n \\to 1\\)\n\nAs the derivatives also go to zero we have\n\\[\nu_x \\to 0\n\\\\\nu_y \\to 0\n\\]\n\n\nCombining the first equation and the third equation, we have\n\\[\nn u_x^2 - (n - 1) B_y^2 = C_1\n\\]\nUsing the boundary conditions, we have \\(C_1 = - (n - 1) a^2\\). So\n\\[\nu_x^2 = (n-1)(B_y^2 - a^2) / n\n\\]\nSimilarly, combining the second equation and the fourth equation, we have\n\\[\nn u_y^2  + (n-1) B_x^2 = C_2 = (n-1)\n\\]\n\\[\nu_y^2 = (n - 1) (1 - B_x^2) / n\n\\]\n(* Define the system of equations *)\neq1 = D[By[z], z] == -n[z] ux[z];\neq2 = D[Bx[z], z] == n[z] uy[z];\neq3 = D[ux[z], z] == By[z] (n[z] - 1);\neq4 = D[uy[z], z] == Bx[z] (1 - n[z]);\neq5 = D[n[z], z] == (n[z] (ux[z] By[z] - uy[z] Bx[z])) / (- Bz^2/n[z]^2 + betaI gamma n[z]^(gamma - 1));\n\n\nBz = 0.1;\nByInfinity = 0.3;\nbetaI = 1;\ngamma = 5/3;\n\nzmax = 10;\n\n(* Boundary conditions *)\nbc1 = Bx[0] == 0;\nbc2 = n[zmax] == 1;\nbc3 = Bx[zmax] == 1;\nbc4 = By[zmax] == ByInfinity;\nbc5 = ux[zmax] == 0;\nbc6 = uy[zmax] == 0;\n\n\n(* Solve the system numerically *)\nsol = NDSolve[{eq1, eq2, eq3, eq4, eq5, bc2, bc3, bc4, bc5, bc6}, {Bx, By, ux, uy, n}, {z, 0, 10}];\n\n(* Plot the solutions *)\nPlot[Evaluate[{Bx[z], By[z], ux[z], uy[z], n[z]} /. sol], {z, 0, 10}, PlotLegends -&gt; {\"Bx[z]\", \"By[z]\", \"ux[z]\", \"uy[z]\", \"n[z]\"}]\nusing BoundaryValueDiffEq\nusing DifferentialEquations\n\nfunction system!(du, u, p, t)\n    n, Bx, By, ux, uy = u\n\n    dBy = -n * ux\n    dBx = n * uy\n    dux = By * (n - 1)\n    duy = Bx * (1 - n)\n    dn = n * (ux * By - uy * Bx) / (- Bz^2/n^2 + betaI * gamma * n^(gamma - 1))\n\n    du .= [dn, dBx, dBy, dux, duy]\nend\n\nfunction bc2a!(resid_a, u, p)\n    resid_a[1] = u[2]\n    resid_a[2] = u[4] # ux\nend\n\nfunction bc2b!(resid_b, u, p)\n    resid_b[1] = u[1]\n    resid_b[2] = u[2] - 1\n    resid_b[3] = u[3]\n    resid_b[4] = u[4]\n    resid_b[5] = u[5]\nend\n\nspan = (0.0, 10.0)\nBz = 0.1\nbetaI = 1\ngamma = 5/3\n\nu0 = [1.3, 0.0, 1.0, 0.0, 1]\n\nbvp = TwoPointBVProblem(system!, (bc2a!, bc2b!), u0, span; bcresid_prototype = (zeros(2), zeros(5)))\nsol2 = solve(bvp, MIRK4(), dt = 0.05)",
    "crumbs": [
      "Home",
      "Notes"
    ]
  },
  {
    "objectID": "final.html",
    "href": "final.html",
    "title": "EPSS M263A, Spring 2024. Final Exam",
    "section": "",
    "text": "Show the following properties of 2-D MHD flows.\nAssuming:\nB=Bx(x,y,t) x + By(x,y,t) y\nV=Vx(x,y,t) x + Vy(x,y,t) y\nρ=ρ(x,y,t)\np=p(x,y,t)\nShow that:\n\nJ=J(x,y,t) z\nIn the MHD approximation (E=-VxB), E = E(x,y,t) z\nIn the MHD approximation and in steady state: E(x,y)=constant\n\n\n\nThe current density \\(\\mathbf{J}\\) in magnetohydrodynamics (MHD) is given by Ampere’s law (in the absence of displacement current):\n\\[\n\\mathbf{J} = \\frac{1}{\\mu_0} (\\nabla \\times \\mathbf{B})\n\\]\nGiven \\(\\mathbf{B} = B_x(x, y, t) \\hat{i} + B_y(x, y, t) \\hat{j}\\)\n\\[\n\\nabla \\times \\mathbf{B} = \\left( \\frac{\\partial B_y}{\\partial x} - \\frac{\\partial B_x}{\\partial y} \\right) \\hat{k}\n\\]\nThus, \\(\\mathbf{J} = J(x, y, t) \\hat{k}\\), where \\(J(x, y, t) = \\frac{1}{\\mu_0} \\left( \\frac{\\partial B_y}{\\partial x} - \\frac{\\partial B_x}{\\partial y} \\right)\\).\n\n\n\nIn the MHD approximation, the electric field \\(\\mathbf{E}\\) is given by:\n\\[\n\\mathbf{E} = -\\mathbf{V} \\times \\mathbf{B}\n\\]\n\\[\n\\mathbf{V} \\times \\mathbf{B} = \\begin{vmatrix}\n\\hat{i} & \\hat{j} & \\hat{k} \\\\\nV_x & V_y & 0 \\\\\nB_x & B_y & 0\n\\end{vmatrix} = (0 - 0) \\hat{i} - (0 - 0) \\hat{j} + (V_x B_y - V_y B_x) \\hat{k}\n\\]\nTherefore, \\(\\mathbf{E}\\) is:\n\\[\n\\mathbf{E} = - (V_x B_y - V_y B_x) \\hat{k} = E(x, y, t) \\hat{k}\n\\]\nWhere \\(E(x, y, t) = - (V_x B_y - V_y B_x)\\).\n\n\n\nIn steady state, all time derivatives are zero. In the MHD approximation, \\(\\mathbf{E} = -\\mathbf{V} \\times \\mathbf{B}\\). From part (b), we know:\n\\[\n\\mathbf{E} = - (V_x B_y - V_y B_x) \\hat{k}\n\\]\nFor \\(\\mathbf{E}\\) to be constant in steady state, \\(E(x, y)\\) should not vary with \\(x\\) or \\(y\\). This implies that:\n\\[\n\\frac{\\partial E}{\\partial x} = 0 \\quad \\text{and} \\quad \\frac{\\partial E}{\\partial y} = 0\n\\]\nThus, \\(E(x, y) = \\text{constant}\\).\nSo, in steady state, the electric field in the MHD approximation is a constant.",
    "crumbs": [
      "Home",
      "EPSS M263A, Spring 2024. Final Exam"
    ]
  },
  {
    "objectID": "final.html#d-mhd-flows",
    "href": "final.html#d-mhd-flows",
    "title": "EPSS M263A, Spring 2024. Final Exam",
    "section": "",
    "text": "Show the following properties of 2-D MHD flows.\nAssuming:\nB=Bx(x,y,t) x + By(x,y,t) y\nV=Vx(x,y,t) x + Vy(x,y,t) y\nρ=ρ(x,y,t)\np=p(x,y,t)\nShow that:\n\nJ=J(x,y,t) z\nIn the MHD approximation (E=-VxB), E = E(x,y,t) z\nIn the MHD approximation and in steady state: E(x,y)=constant\n\n\n\nThe current density \\(\\mathbf{J}\\) in magnetohydrodynamics (MHD) is given by Ampere’s law (in the absence of displacement current):\n\\[\n\\mathbf{J} = \\frac{1}{\\mu_0} (\\nabla \\times \\mathbf{B})\n\\]\nGiven \\(\\mathbf{B} = B_x(x, y, t) \\hat{i} + B_y(x, y, t) \\hat{j}\\)\n\\[\n\\nabla \\times \\mathbf{B} = \\left( \\frac{\\partial B_y}{\\partial x} - \\frac{\\partial B_x}{\\partial y} \\right) \\hat{k}\n\\]\nThus, \\(\\mathbf{J} = J(x, y, t) \\hat{k}\\), where \\(J(x, y, t) = \\frac{1}{\\mu_0} \\left( \\frac{\\partial B_y}{\\partial x} - \\frac{\\partial B_x}{\\partial y} \\right)\\).\n\n\n\nIn the MHD approximation, the electric field \\(\\mathbf{E}\\) is given by:\n\\[\n\\mathbf{E} = -\\mathbf{V} \\times \\mathbf{B}\n\\]\n\\[\n\\mathbf{V} \\times \\mathbf{B} = \\begin{vmatrix}\n\\hat{i} & \\hat{j} & \\hat{k} \\\\\nV_x & V_y & 0 \\\\\nB_x & B_y & 0\n\\end{vmatrix} = (0 - 0) \\hat{i} - (0 - 0) \\hat{j} + (V_x B_y - V_y B_x) \\hat{k}\n\\]\nTherefore, \\(\\mathbf{E}\\) is:\n\\[\n\\mathbf{E} = - (V_x B_y - V_y B_x) \\hat{k} = E(x, y, t) \\hat{k}\n\\]\nWhere \\(E(x, y, t) = - (V_x B_y - V_y B_x)\\).\n\n\n\nIn steady state, all time derivatives are zero. In the MHD approximation, \\(\\mathbf{E} = -\\mathbf{V} \\times \\mathbf{B}\\). From part (b), we know:\n\\[\n\\mathbf{E} = - (V_x B_y - V_y B_x) \\hat{k}\n\\]\nFor \\(\\mathbf{E}\\) to be constant in steady state, \\(E(x, y)\\) should not vary with \\(x\\) or \\(y\\). This implies that:\n\\[\n\\frac{\\partial E}{\\partial x} = 0 \\quad \\text{and} \\quad \\frac{\\partial E}{\\partial y} = 0\n\\]\nThus, \\(E(x, y) = \\text{constant}\\).\nSo, in steady state, the electric field in the MHD approximation is a constant.",
    "crumbs": [
      "Home",
      "EPSS M263A, Spring 2024. Final Exam"
    ]
  },
  {
    "objectID": "index.html#different-normalization",
    "href": "index.html#different-normalization",
    "title": "Multifluid model of a one-dimensional steady state force-free current sheet",
    "section": "Different normalization",
    "text": "Different normalization\nNormalized the quantities of the ion species\n\\[\nn_α := λ_{αn} n_e\n\\\\\nu_{αx} := λ_{αu} B_z / \\sqrt{n_{e,\\infty}}\n\\\\\nu_{αy} := λ_{αu} B_z / \\sqrt{n_{e,\\infty}}\n\\\\\nu_{αz} := λ_{αu} B_z / \\sqrt{n_{e,\\infty}}\n\\]\n\\[\nθ' = \\mp \\frac{Λ_u}{B_0} + Γ_e\n\\]\nconf = {ratio -&gt; 1/2}\nTextString[conf]\n&lt;!-- Convert a dict-like configuration to a string --&gt;\nsaveName[c_] := StringJoin[ToString /@ c]"
  },
  {
    "objectID": "article.html",
    "href": "article.html",
    "title": "On a Alvenicity of solar wind discontinuities",
    "section": "",
    "text": "Introduction\n\n\nPlasma-Field Equations for Force-free current sheet\nFollowing Steinhauer, McCarthy, and Whipple (2008), we consider a one-dimensional force-free current sheet where \\(B_x^2 + B_y^2 = B_0^2 = \\text{const}\\), with all variables dependent solely on \\(z\\). The system comprises multiple steady-state ion species (fluid groups) and a background electron fluid.\nElectron motion is along the field lines \\(\\mathbf{u_e} = Γ_e \\mathbf{B} / (n_e B_z)\\). And the conservation of fluid mass \\(d(n_α u_{αz})/dz = 0\\) integrate to a constant parameters \\(Γ_α = n_α u_{αz}\\). The momentum equations for each ion species are given by\n\\[\n\\begin{aligned}\nΓ_α \\frac{d u_{α x}}{d z} &= n_α u_{α y} B_z - Γ_α B_y\n\\\\\nΓ_α \\frac{d u_{α y}}{d z} &= Γ_α B_x-n_α u_{α x} B_z\n\\\\\nΓ_α \\frac{d u_{α z}}{d z} &= -\\frac{1}{2} \\frac{d p_α}{d z}-n_α \\frac{d \\phi}{d z}+n_α u_{α x} B_y-n_α u_{α y} B_x\n\\end{aligned}\n\\tag{1}\\]\nAmpere’s law connects the fields and the flow components\n\\[\nd B_y / d z = - J_x = - \\sum_α n_α u_{α x} + n_e u_{e x} = -n u_x+\\Gamma_e B_x / B_z\n\\tag{2}\\]\n\\[\nd B_x / d z = J_y = \\sum_α n_α u_{α y} - n_e u_{e y} = n u_y-\\Gamma_e B_y / B_z\n\\tag{3}\\]\n\\[\nd B_z / d z = J_z = \\sum_α n_α u_{α z} - n_e u_{e z} = n u_z-\\Gamma_e\n\\tag{4}\\]\nAnd the Gauss’s law for magnetism gives another constant parameter \\(B_{z} = \\text{const}\\).\nThis is a system of \\(3N+2\\) equations for \\(4N+2\\) unknown dependent variables: \\(B_x\\), \\(B_y\\), and \\(N\\) each of \\(n\\), \\(p\\), \\(u_x\\), and \\(u_y\\). Since we are interested in force-free solutions with \\(B_x^2 + B_y^2 = B_0^2 = \\text{const}\\), this condition provides an additional equation for the system.\nA scalar pressure model, which provides another N equations connecting \\(p\\) and \\(n\\), was attempted as per Steinhauer, McCarthy, and Whipple (2008), but no solution was found (the system was overdetermined). Therefore, the system is considered with free parameters. For a system with two ion species, there are 9 equations for 10 unknowns. The system can be solved by setting one of the parameters to have a specific profile and solving the rest of the system.\nThe force-free condition let us express the magnetic field in terms of the rotation angle \\(θ\\) as \\(B_x = B_0 \\cos θ\\) and \\(B_y = B_0 \\sin θ\\). From Ampere’s law (Equation 2) and (Equation 3), we have:\n\\[\nn (u_x B_y  - u_y B_x) = 0\n\\]\nAnd we could express the density and bulk velocity in terms of every ion species: \\(n_α u_{αx} B_y = n_α u_{αy} B_x + C_α\\). This above equation can be rewritten as \\(\\sum_α C_α =0\\). The simplest case is to set \\(C_α=0\\) for all species, which is the case we will consider in this study.\n\\[\nn_α (u_{αx} B_y - n_α u_{αy} B_x) = 0\n\\tag{5}\\]\nCombining the above equation with the first two equations in (Equation 1), we have:\n\\[\nu_{αx}^2 + u_{αy}^2 = const\n\\]\nThis would let us express the bulk velocity in terms of the rotation angle \\(θ_α\\) as \\(u_{αx} = u_{α} \\cos θ_α\\) and \\(u_{αy} = u_{α} \\sin θ_α\\). And substituting the above expression into the our assumption (Equation 5), we have:\n\\[\n\\tan θ = \\tan θ_α\n\\]\n#TODO# Here we consider the case where \\(θ_α = θ\\) for all species, but the same procedure can be applied to the case where \\(θ_α = θ + \\pi\\) and it would give the same results.\nThe first momentum equation (Equation 1) after substituting the above expression becomes:\n\\[\n- u_α \\sin θ_α θ_α' = n_α u_α \\sin θ_α B_z / Γ_α - B_0 \\sin θ\n\\]\n\\[\n\\Rightarrow\nθ_α' = - \\frac{n_α B_z}{Γ_α} + \\frac{B_0}{u_α}\n\\tag{6}\\]\nNote that \\(θ_α, n_α\\) are dependent variables, and \\(u_α, B_0, B_z, Γ_α\\) are constants pre-determined by the system. So given the profile of \\(n_α\\) and the boundary condition, we could solve the above equation to get the profile of \\(θ_α\\), thus the profile of \\(u_α\\).\nThe Ampere’s law (Equation 3) after substitution becomes:\n\\[\n- B_0 \\sin θ θ' = \\sum n_α u_{α} \\sin θ_α - Γ_e B_0 \\sin θ / B_z\n% Λ_y n_1 u_1 \\sin θ_1 - Λ_z Γ_1 B_0 \\sin θ / B_z\n\\]\n\\[\n\\Rightarrow\nθ' = - \\frac{ \\sum n_α u_{α} }{B_0} + \\frac{Γ_e}{B_z}\n\\tag{7}\\]\nThe above equation relates the rotation angle \\(θ\\) to the plasma bulk velocity \\(n u \\equiv \\sum n_α u_{α}\\). By equating the above two equations of \\(θ'\\), we could get a equation relating the plasma bulk velocity to one specific species:\n\\[\nn u = B_0 \\left(\\frac{Γ_e}{B_z}+\\frac{n_α B_z}{Γ_α}-\\frac{B_0}{u_α}\\right)\n\\]\nIn the asymptotic region, as all variables approach constant values, the derivatives must vanish. For Equation 6, this means \\(θ_α(∞)' = 0 = - \\frac{n_α(∞) B_z}{Γ_α} + \\frac{B_0}{u_α}\\). This relates the velocity of each species to the asymptotic density. Rewriting the Equation 6 in terms of asymptotic values, we have:\n\\[\nθ_α' = \\frac{B_z}{Γ_α} (n_α - n_α(∞))\n\\tag{8}\\]\nConveniently, the center of the current sheet is chosen as the origin \\(z = 0\\), which corresponds to the lower boundary of Equation 6. As a result, the boundary condition for the rotation angle is given by \\(\\theta_\\alpha(0) = \\pi/2\\).\nCombine momentum equation (x) (Equation 1) and Ampere’s law (y) (Equation 3) with condition that the constant of integration vanishes at the current sheet center yield\n\\[\nB_x B_z = \\sum n_α u_{α,x} u_{α,z} = \\sum Γ_α u_{α,x}\n\\]\nEvaluate the above equation in the asymptotic limit, we have\n\\[\n{B_z}^2 = \\sum Γ_{α}^2/n_{α}(∞)\n\\tag{9}\\]\nTo simplify the analysis, it is useful to employ a dimensionless system by normalizing the variables with their asymptotic values: in this study, the magnetic field is normalized by \\(B_{\\text{ref}} = B_z\\) , and the density is normalized by \\(n_{\\text{ref}} = n(∞)\\). Other reference values derived from these two are displayed in the table below.\n\n\n\n\n\n\n\nVariable\nReference Value\n\n\n\n\nFrequency (ion plasma frequency)\n\\(\\omega_{pi} = \\sqrt{\\frac{n_{\\text{ref}} e^2}{m_i \\varepsilon_0}}\\)\n\n\nLength (ion inertial length)\n\\(L_{\\text{ref}} = c / \\omega_{pi}\\)\n\n\nVelocity (Alfvén velocity)\n\\(V_{\\text{ref}} = B_{\\text{ref}} / \\sqrt{\\mu_0 m_i n_{\\text{ref}}}\\)\n\n\n\n\n\nResults\nTODO: define and compare current sheet thickness\nTODO: compare with Harris current sheet solution with same thickness\nThe multifluid model developed above is used here to study a specific example and the effects of model parameters: assume a density profile for one species taking the form of a Gaussian function\n\\[\nn_1(z) \\to n_1 (∞) (\\frac{c_1}{\\frac{z}{\\delta_1 }^2+1}+1)\n\\]\nSolving the Equation 8 analytically, we have the rotation angle profile as\n\\[\n\\theta (z)\\to \\frac{\\pi  \\Gamma _1-2 c_1 \\delta _1 B_z n_1(\\infty ) \\tan ^{-1}\\left(\\frac{z}{\\delta _1}\\right)}{2 \\Gamma _1}\n\\]\nFor the simplest situation where we have two group of ions of the same density but opposite bulk velocity, i.e., \\(n_1 = n_2, u_1 = -u_2\\), the system could be determined given \\(c_1\\), \\(δ_1\\), and \\(B_0\\). The system profile of magnetic field, plasma density, and plasma velocity for one specific case (\\(δ_1=1, c_1=1/\\sqrt{2}, B_0 = 2\\)) is plotted below Figure 2. The specific profiles are chosen to have zero electron current across the current sheet and zero \\(B_y\\) in the asymptotic limit, corresponding to a 180° rotation of the magnetic field across the current sheet. However, in general, we would expect the electron current to be non-zero.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: (a). Magnetic field, ion density, and ion bulk velocity for \\(n_1 = n_2, u_1 = -u_2\\) and \\(δ_1=1, c_1=1/\\sqrt{2}, B_0 = 2\\). (b). Current density profiles for the same case.\n\n\n\n\nFor the same asymptotic magnetic field, it is interesting to see how the plasma profiles change with different system parameters.\nHere we set \\(B_y(z=\\infty) = 1/2 B_0, B_0 = 2 B_z\\), and let two ion species have the opposite bulk velocity but this time with different densities. By varying \\(n_1 (∞)\\), we find that the magnetic field profiles are exactly the same, while plasma velocity profiles vary.\nWe normalize the plasma velocity by asympotic Alfvén velocity \\(v_{A,∞} = B_0 / \\sqrt{n}\\), and the profiles are plotted below Figure 2 (b). It could be seen that for \\(λ_{n,∞} = 1\\), we have zero bulk velocity change across the current sheet in the asymptotic limit.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Magnetic field, ion density, and ion bulk velocity for \\(λ_{n,∞}=1\\) and \\(λ_{z,∞}=-1\\).\n\n\n\n\n\n\n\n\n\n\n\n(b) Normalized Plasma Velocity \\(U_x\\) Profiles for Different \\(λ_{n,∞}\\).\n\n\n\n\n\n\n\n\n\n\n\n(c) Normalized Plasma Velocity \\(U_y\\) Profiles for Different \\(λ_{n,∞}\\).\n\n\n\n\n\n\n\nFigure 2\n\n\n\n\n\n\n\nReferences\n\nSteinhauer, McCarthy, and Whipple (2008)\n\n\n\n\n\n\nReferences\n\nSteinhauer, L. C., M. P. McCarthy, and E. C. Whipple. 2008. “Multifluid Model of a One-Dimensional Steady State Magnetotail Current Sheet.” Journal of Geophysical Research: Space Physics 113 (A4). https://doi.org/10.1029/2007JA012578.",
    "crumbs": [
      "Home",
      "On a Alvenicity of solar wind discontinuities"
    ]
  },
  {
    "objectID": "article.html#alfvenicity",
    "href": "article.html#alfvenicity",
    "title": "On a Alvenicity of solar wind discontinuities",
    "section": "Alfvenicity",
    "text": "Alfvenicity\nFor the same asymptotic magnetic field, it is interesting to see how the plasma profiles change with different system parameters.\nHere we set \\(B_y(z=\\infty) = 1/2 B_0, B_0 = 2 B_z\\), and let two ion species have the opposite bulk velocity but this time with different densities. By varying \\(n_1(∞)\\), we find that the magnetic field profiles are exactly the same, while plasma density and velocity profiles vary.\nWe normalize the plasma velocity by asympotic Alfvén velocity \\(v_{A}(∞) = B_0 / \\sqrt{\\mu_0 m_i n}\\), and the profiles are plotted below Figure 3. It could be seen that for \\(n_1(∞) = 0.5\\), we have zero bulk velocity change across the current sheet in the asymptotic limit. And the change of bulk velocity across the current sheet increases with \\(n_1(∞)\\) decreasing to zero Figure 3 (b). The normalized plasma velocity \\(U_y\\) in the aympotic limit decreases with \\(n_1(∞)\\) decreasing to zero Figure 3 (c).\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Magnetic field, ion density, and ion bulk velocity for two ion species with same bulk velocity but different densities.\n\n\n\n\n\n\n\n\n\n\n\n(b) Plasma velocity \\(U_x\\) profiles normalized by aysmpotic Alfvén velocity for different \\(n_1(∞)\\).\n\n\n\n\n\n\n\n\n\n\n\n(c) Plasma velocity \\(U_y\\) profiles normalized by aysmpotic Alfvén velocity for different \\(n_1(∞)\\).\n\n\n\n\n\n\n\n\n\n\nFigure 3\n\n\n\nNormalized by Alfvén velocity \\(v_{A,x}\\) and \\(v_{A,y}\\), the plasma velocity profiles are plotted below Figure 4 (a) and Figure 4 (b). The normalized plasma velocity profiles are exactly the same for \\(U_x/v_{A,x}\\) and \\(U_y/v_{A,y}\\) for same \\(n_1(∞)\\). When \\(n_1(∞)\\) decreases to zero, the normalized plasma velocity would approach one in the asymptotic limit, indicating the Alvenicity of the current sheet.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Plasma velocity \\(U_x\\) profiles normalized by \\(v_{A,x}\\) for different \\(n_1(∞)\\).\n\n\n\n\n\n\n\n\n\n\n\n(b) Plasma velocity \\(U_y\\) profiles normalized by \\(v_{A,y}\\) for different \\(n_1(∞)\\).\n\n\n\n\n\n\n\nFigure 4\n\n\n\n\nThe asymptotic velocity for the each species, bulk velocity and normalized one by Alfvén velocity are plotted below Figure 5 and Figure 5 (b) for the case of \\(\\lambda_{z,2} = - 1\\) (two groups of opposite velocity in z direction) and \\(\\lambda_{z,2} = - 1/2\\) respectively. For the case of \\(\\lambda_{z,2} = - 1\\) as shown in Figure 5 (a), the normalized velocity reaches zero when \\(n_1(∞) = 0.5\\). The bulk velocity of each species is the same in the asymptotic limit and does not depend on \\(n_1(∞)\\). However, this does not generally hold when \\(\\lambda_{z,2} \\neq - 1\\) as shown in Figure 5 (b) for the case of \\(\\lambda_{z,2} = - 1/2\\).. The normalized velocity reaches zero when \\(n_1(∞) = 1/3\\), and the bulk velocity of each species differs in the asymptotic limit and depends on \\(n_1(∞)\\).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Asymptotic velocity for each species, bulk velocity and normalized one by Alfvén velocity for the case of \\(\\lambda_{z,2} = - 1\\) (a) and \\(\\lambda_{z,2} = - 1/2\\) (b).",
    "crumbs": [
      "Home",
      "On a Alvenicity of solar wind discontinuities"
    ]
  },
  {
    "objectID": "article.html#current-sheet-thickness",
    "href": "article.html#current-sheet-thickness",
    "title": "On a Alvenicity of solar wind discontinuities",
    "section": "Current Sheet Thickness",
    "text": "Current Sheet Thickness\nTODO: define and compare current sheet thickness\nTODO: compare with Harris current sheet solution with same thickness",
    "crumbs": [
      "Home",
      "On a Alvenicity of solar wind discontinuities"
    ]
  },
  {
    "objectID": "article.html#density-peaking",
    "href": "article.html#density-peaking",
    "title": "On a Alvenicity of solar wind discontinuities",
    "section": "Density Peaking",
    "text": "Density Peaking",
    "crumbs": [
      "Home",
      "On a Alvenicity of solar wind discontinuities"
    ]
  },
  {
    "objectID": "files/communication.html",
    "href": "files/communication.html",
    "title": "Communication",
    "section": "",
    "text": "From Zijin to Anton\nHi Anton,\nI kinda of finished the results part of the paper. Please take a look",
    "crumbs": [
      "Home",
      "Files",
      "Communication"
    ]
  },
  {
    "objectID": "files/communication.html#section",
    "href": "files/communication.html#section",
    "title": "Communication",
    "section": "",
    "text": "From Zijin to Anton\nHi Anton,\nI kinda of finished the results part of the paper. Please take a look",
    "crumbs": [
      "Home",
      "Files",
      "Communication"
    ]
  },
  {
    "objectID": "nbs/examples.html",
    "href": "nbs/examples.html",
    "title": "Get data",
    "section": "",
    "text": "Code\n%load_ext autoreload\n%autoreload 2\nfrom discontinuitypy.plot import tsplot_Alvenicity\nfrom space_analysis.utils.speasy import to_dataarrays\nimport speasy as spz\nfrom speasy.core.requests_scheduling.request_dispatch import init_cdaweb\nimport importlib.util\nimport matplotlib.pyplot as plt\nfrom beforerr.matplotlib import PlotOpts, process_figure, easy_save\nimport holoviews as hv\n\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n\nCode\nhv.extension('matplotlib')\n \nif importlib.util.find_spec(\"scienceplots\") is not None:\n    importlib.import_module(\"scienceplots\")\n    plt.style.use([\"science\", \"nature\", \"notebook\"])\ninit_cdaweb()\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\nCode\nplot_opts = PlotOpts(\n    sync_legend_colors=True,\n    hide_legend_lines=True\n)\n\n\n\n\nCode\ncoord = \"gsm\"\nthm_products = [\n    \"cda/THB_L2_FGM/thb_fgs_gsm\",\n    \"cda/THB_L2_MOM/thb_peim_velocity_gsmQ\",\n    \"cda/THB_L2_MOM/thb_peim_densityQ\",\n]\nthm_tr = [\"2016-05-20T17:47:00\", \"2016-05-20T17:53:40\"]\n\npsp_products = [\n    \"cda/PSP_FLD_L2_MAG_RTN/psp_fld_l2_mag_RTN\",\n    \"cda/PSP_SWP_SPI_SF00_L3_MOM/VEL_SC\",\n    \"cda/PSP_SWP_SPI_SF00_L3_MOM/DENS\"\n]\npsp_tr = [\"2021-01-17T13:54:17\", \"2021-01-17T13:54:32\"]\n\nwi_products = [\n    \"cda/WI_H2_MFI/BGSE\",\n    \"cda/WI_PM_3DP/P_VELS\",\n    \"cda/WI_PM_3DP/P_DENS\"\n]\nwi_tr = [\"2011-08-26T21:26:00\", \"2011-08-26T21:27:30\"]\n\n\n\n\nCode\ndef temp(products, timerage):\n    d = spz.get_data(products, timerage)\n    das = to_dataarrays(d)\n    plot = tsplot_Alvenicity(*das)\n    for subplot in plot:\n        subplot.opts(legend_position='right')\n    plot[-1].opts(show_legend=False)\n    return plot\n\n\n\n\nCode\nconfigs = [\n    (thm_products, thm_tr),\n    (psp_products, psp_tr),\n    (wi_products, wi_tr)\n]\nps = [temp(*c) for c in configs]\n\n\n20-Aug-24 10:33:47: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n\n20-Aug-24 10:33:47: Can't get THB_L2_MOM/thb_peim_velocity_gsmQ without web service, switching to web service\n20-Aug-24 10:33:47: Can't get THB_L2_MOM/thb_peim_densityQ without web service, switching to web service\n2024-08-20 10:33:47.438 | INFO     | space_analysis.ds.tplot.formulary:ts_Alfven_speed:22 - Time of B and density are not the same, interpolating density to B\n20-Aug-24 10:33:47: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n\n2024-08-20 10:33:47.871 | INFO     | space_analysis.ds.tplot.formulary:ts_Alfven_speed:22 - Time of B and density are not the same, interpolating density to B\n20-Aug-24 10:33:48: DeprecationWarning: parsing timezone aware datetimes is deprecated; this will raise an error in the future\n\n2024-08-20 10:33:48.124 | INFO     | space_analysis.ds.tplot.formulary:ts_Alfven_speed:22 - Time of B and density are not the same, interpolating density to B\n\n\n\n\nCode\ndef render_p(p, name):\n    p.opts(fig_size=150, tight=True, sublabel_format=None)\n    fig = hv.render(p)\n    process_figure(fig, plot_opts)\n    easy_save(name, fig)\n\n\n\n\nCode\nnames = [\"THB\", \"PSP\", \"Wind\"]\nfor p, name in zip(ps,names):\n    render_p(p, name)\n\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:12: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:13: MatplotlibDeprecationWarning: Passing label as a length 92 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:14: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 4394 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:15: MatplotlibDeprecationWarning: Passing label as a length 5 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:16: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 978 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.\n\n20-Aug-24 10:34:17: MatplotlibDeprecationWarning: Passing label as a length 29 sequence when plotting a single dataset is deprecated in Matplotlib 3.9 and will error in 3.11.  To keep the current behavior, cast the sequence to string before passing.",
    "crumbs": [
      "Home",
      "Nbs",
      "Get data"
    ]
  }
]